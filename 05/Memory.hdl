// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */
 
// Memory : 0 ~ 16383 : 16384 : 2** 14
// Screen(in= ,load= ,address= ,out= ) 16384 ~ 24575 : 8192 : 2 ** 13
// Keyboard(out= ) 24576


CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
	DMux(in=load, sel=address[14], a=DMuxa, b=DMuxb);               //  0XX,XXXX,XXXX,XXXX
	DMux(in=DMuxb, sel=address[13], a=DMuxbDMuxa, b=DMuxbDMuxb);    //  [10,11]X,XXXX,XXXX,XXXX
	
	RAM16K(in=in, load=DMuxa, address=address[0..13], out=ram);      // 000,0000,0000,0000 ~ 011,1111,1111,1111
	Screen(in=in, load=DMuxbDMuxa, address=address[0..12], out=scr); // 100,0000,0000,0000 ~ 101,1111,1111,1111

	Keyboard(out=keyOut);
	Register(in=keyOut, load=true, out=keyOutRegOut);
	
	Mux16(a=scr, b=keyOutRegOut, sel=address[13], out=mux1);
	Mux16(a=ram, b=mux1, sel=address[14], out=out);
	
}