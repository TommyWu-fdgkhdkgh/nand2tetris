// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// if instruction[15] == 1 ==> c instruction
	// if instruction[3] == 1 ==> M as destination
    And(a=instruction[15], b=instruction[3], out=writeM);
	
	// if out == 0 : zr = 1
	// if out < 0  : ng = 1
	ALU(x=DRegOut,y=ARegOutinMMux16,zx=instruction[11], nx=instruction[10],zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],out=ALUout ,zr=ALUzr ,ng=ALUng);
	And16(a=ALUout, b=ALUout, out=outM);
	
	Mux16(a=instruction, b=ALUout, sel=instruction[15], out=insAluMux16);
	
	Mux16(a=ARegOut, b=inM, sel=instruction[12], out=ARegOutinMMux16);
	
	// A register
	// Not(instruction[15]) Or (And(instruction[15], instruction[5]))
	Not(in=instruction[15], out=NotIns15);
	And(a=instruction[15], b=instruction[5], out=ins15Andins5);
	Or(a=NotIns15, b=ins15Andins5, out=NotIns15Orins15Andins5);
	ARegister(in=insAluMux16, load=NotIns15Orins15Andins5, out=ARegOut); 
	And16(a=ARegOut, b=ARegOut, out[0..14]=addressM);
	
	// D register 
	// And(instruction[15], instruction[4])
	And(a=instruction[15], b=instruction[4], out=ins15Andins4);
	DRegister(in=ALUout, load=ins15Andins4, out=DRegOut);
	
    // PC
	Not(in=instruction[0], out=NotIns0);
	Not(in=instruction[1], out=NotIns1);
	Not(in=instruction[2], out=NotIns2);
	Not(in=ALUzr, out=NotALUzr);
	Not(in=ALUng, out=NotALUng);
	
	// JGT
	And(a=instruction[0], b=NotIns1, out=Ins0AndNotIns1);
	And(a=Ins0AndNotIns1, b=NotIns2, out=Ins0AndNotIns1AndNotIns2);
	And(a=Ins0AndNotIns1AndNotIns2, b=NotALUzr, out=preJGT);
	And(a=preJGT, b=NotALUng, out=JGT);
	
	// JEQ
	And(a=NotIns0, b=instruction[1], out=NotIns0AndIns1);
	And(a=NotIns0AndIns1, b=NotIns2, out=NotIns0AndIns1AndNotIns2);
	And(a=NotIns0AndIns1AndNotIns2, b=ALUzr, out=preJEQ);
	And(a=preJEQ, b=NotALUng, out=JEQ);
	
	// JGE
	And(a=instruction[0], b=instruction[1], out=Ins0AndIns1);
	And(a=Ins0AndIns1, b=NotIns2, out=Ins0AndIns1AndNotIns2);
	And(a=Ins0AndIns1AndNotIns2, b=NotALUng, out=JGE);

    // JLT
	And(a=NotIns0, b=NotIns1, out=NotIns0AndNotIns1);
	And(a=NotIns0AndNotIns1, b=instruction[2], out=NotIns0AndNotIns1AndIns2);
	And(a=NotIns0AndNotIns1AndIns2, b=NotALUzr, out=preJLT);
	And(a=preJLT, b=ALUng, out=JLT);
	
	// JNE
	And(a=Ins0AndNotIns1, b=instruction[2], out=Ins0AndNotIns1AndIns2);
    And(a=Ins0AndNotIns1AndIns2, b=NotALUzr, out=JNE);
	
	
	// JLE
	And(a=NotIns0AndIns1, b=instruction[2], out=NotIns0AndIns1AndIns2);
	Or(a=ALUzr, b=ALUng, out=preJLE);
	And(a=preJLE, b=NotIns0AndIns1AndIns2, out=JLE);
	
	// JMP
	And(a=Ins0AndIns1, b=instruction[2], out=JMP);
	
	Or8Way(in[0]=false, in[1]=JGT, in[2]=JEQ, in[3]=JGE, in[4]=JLT, in[5]=JNE, in[6]=JLE, in[7]=JMP, out=preJmpBit);
	And(a=preJmpBit, b=instruction[15], out=jmpBit);
	
	PC(in=ARegOut, load=jmpBit, inc=true, reset=reset, out[0..14]=pc);
}